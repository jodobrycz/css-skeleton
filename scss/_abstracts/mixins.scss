/* clean list */
@mixin clean-list() {
	//list-style: none;
	margin-bottom: 0;

	/*
	li {
		padding-left: 0;

		&:before {
			display: none;
		}
	}
	*/
}


/* clear floating */
@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

/* responsive image */
@mixin responsive-image() {
	display: block;
	height: auto;
	max-width: 100%;
	vertical-align: middle; /* Remove the gap between <img> elements and the bottom of their */
	width: auto;
}


/* menu burger */
/*
@mixin menuBurgerLine {
	background: $burger-line;
	display: inline-block;
	height: .2rem;
	width: 2.8rem;
}
*/


/* overflow container */
@mixin overflow-container() {
	margin: auto;
	max-width: $max-container-width;
	position: relative;
	width: 100%;
}


/* svg */
@mixin svg-icon-fill($fill: $color-white, $width: 5rem, $height: 5rem) {
	fill: $fill;
	fill-rule: evenodd;
	height: $height;
	stroke: $fill;
	stroke-width: 0;
	transition: fill $animation-speed ease;
	width: $width;
}

@mixin svg-icon-stroke($stroke: $color-white, $width: 5rem, $height: 5rem) {
	fill: none;
	fill-rule: evenodd;
	height: $height;
	stroke: $stroke;
	stroke-linecap: round;
	stroke-linejoin: round;
	width: $width;
}


/* horizontal scroll container */
@mixin horizontal-scroll-container() {
	&::-webkit-scrollbar {
		-webkit-appearance: none;
		height: .8rem;
	}

	&::-webkit-scrollbar-thumb {
		background-color: rgba(0, 0, 0, 0.3);
		border-radius: .4rem;
	}
}


/* screen reader only */
@mixin sr-only() {
	border: 0;
	clip: rect(0, 0, 0, 0);
	height: 1px;
	margin: 1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}

@mixin sr-only-focusable() {
	&:active,
	&:focus {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto;
		white-space: normal;
	}
}


/* add hover and focus */
@mixin hover() {
	&:hover,
	&:focus,
	&:focus-within {
		@content;
	}
}


/* media queries */
//$one: 1 / 16;
$one: .04;

@mixin screen-xs() {
	@media (min-width: #{map-get($grid-breakpoints, xs)}) {
		@content;
	}
}

@mixin screen-sm() {
	@media (min-width: #{map-get($grid-breakpoints, sm)}) {
		@content;
	}
}

@mixin screen-md() {
	@media (min-width: #{map-get($grid-breakpoints, md)}) {
		@content;
	}
}

@mixin screen-lg() {
	@media (min-width: #{map-get($grid-breakpoints, lg)}) {
		@content;
	}
}

@mixin screen-xl() {
	@media (min-width: #{map-get($grid-breakpoints, xl)}) {
		@content;
	}
}

@mixin screen-xxs-max() {
	@media (max-width: #{map-get($grid-breakpoints, xs) - $one}) {
		@content;
	}
}

@mixin screen-xs-max() {
	@media (max-width: #{map-get($grid-breakpoints, sm) - $one}) {
		@content;
	}
}

@mixin screen-sm-max() {
	@media (max-width: #{map-get($grid-breakpoints, md) - $one}) {
		@content;
	}
}

@mixin screen-md-max() {
	@media (max-width: #{map-get($grid-breakpoints, lg) - $one}) {
		@content;
	}
}

@mixin screen-lg-max() {
	@media (max-width: #{map-get($grid-breakpoints, xl) - $one}) {
		@content;
	}
}

//  respond above
// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

	// If the breakpoint exists in the map.
	@if map-has-key($grid-breakpoints, $breakpoint) {

		// Get the breakpoint value.
		$breakpoint-value: map-get($grid-breakpoints, $breakpoint);

		// Write the media query.
		@media (min-width: $breakpoint-value) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {

		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// respond below
// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

	// If the breakpoint exists in the map.
	@if map-has-key($grid-breakpoints, $breakpoint) {

		// Get the breakpoint value.
		$breakpoint-value: map-get($grid-breakpoints, $breakpoint);

		// Write the media query.
		//@media (max-width: ($breakpoint-value - 1)) {
		@media (max-width: ($breakpoint-value - $one)) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {

		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// respond between
// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

	// If both the lower and upper breakpoints exist in the map.
	@if map-has-key($grid-breakpoints, $lower) and map-has-key($grid-breakpoints, $upper) {

		// Get the lower and upper breakpoints.
		$lower-breakpoint: map-get($grid-breakpoints, $lower);
		$upper-breakpoint: map-get($grid-breakpoints, $upper);

		// Write the media query.
		//@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
		@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - $one)) {
			@content;
		}

		// If one or both of the breakpoints don't exist.
	} @else {

		// If lower breakpoint is invalid.
		@if (map-has-key($grid-breakpoints, $lower) == false) {

			// Log a warning.
			@warn 'Your lower breakpoint was invalid: #{$lower}.';
		}

		// If upper breakpoint is invalid.
		@if (map-has-key($grid-breakpoints, $upper) == false) {

			// Log a warning.
			@warn 'Your upper breakpoint was invalid: #{$upper}.';
		}
	}
}
