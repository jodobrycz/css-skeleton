/* clear floating */
@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

/* responsive image */
@mixin responsive-image() {
	block-size: auto;
	display: block;
	inline-size: auto;
	max-inline-size: 100%;
	vertical-align: middle; /* Remove the gap between <img> elements and the bottom of their */
}

/* overflow container */
@mixin overflow-container() {
	inline-size: 100%;
	margin: auto;
	max-inline-size: $max-container-width;
	position: relative;
}


/* svg */
@mixin svg-icon-fill($fill: currentColor, $width: 5rem, $height: 5rem) {
	@include transition(fill);
	block-size: $height;
	fill: $fill;
	fill-rule: evenodd;
	inline-size: $width;
	stroke: $fill;
	stroke-width: 0;
}

@mixin svg-icon-stroke($stroke: currentColor, $width: 5rem, $height: 5rem) {
	block-size: $height;
	fill: none;
	fill-rule: evenodd;
	inline-size: $width;
	stroke: $stroke;
	stroke-linecap: round;
	stroke-linejoin: round;
}

@mixin visually-hidden() {
	block-size: 1px;
	border: 0;
	clip: rect(0, 0, 0, 0);
	inline-size: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	white-space: nowrap;
}

/* scrollbar */
@mixin scrollbar($scrollbar-dimension: $scrollbar-dimension, $scrollbar-radius: $scrollbar-radius) {
	/* Firefox */
	scrollbar-color: $scrollbar-thumb-color $scrollbar-track-color; /* thumb and track color */
	scrollbar-width: thin; /* value: none, thin, auto */

	/* Webkit - Chrome */
	&::-webkit-scrollbar {
		-webkit-appearance: none;
		block-size: $scrollbar-dimension;
		inline-size: $scrollbar-dimension;
	}

	&::-webkit-scrollbar-thumb {
		background-color: $scrollbar-thumb-color;
		border-radius: $scrollbar-radius;
	}

	&::-webkit-scrollbar-track {
		background-color: $scrollbar-track-color;
	}
}


/* add focus */
@mixin focus() {
	&:focus,
	&:focus-within,
	&:active {
		@content;
	}
}


/* placeholder */
@mixin placeholder {
	&::placeholder {
		@content;
	}
}

/* media queries */
//$one: 1 / 16;
$one: .04;

@mixin screen-xs() {
	@media (min-width: #{map-get($grid-breakpoints, xs)}) {
		@content;
	}
}

@mixin screen-sm() {
	@media (min-width: #{map-get($grid-breakpoints, sm)}) {
		@content;
	}
	/*
    @media (width >= #{map-get($grid-breakpoints, sm)}) {
      @content;
    }
    */
}

@mixin screen-md() {
	@media (min-width: #{map-get($grid-breakpoints, md)}) {
		@content;
	}
}

@mixin screen-lg() {
	@media (min-width: #{map-get($grid-breakpoints, lg)}) {
		@content;
	}
}

@mixin screen-xl() {
	@media (min-width: #{map-get($grid-breakpoints, xl)}) {
		@content;
	}
	/*
    @media (width >= #{map-get($grid-breakpoints, xl)}) {
      @content;
    }
    */
}

@mixin screen-xxs-max() {
	@media (max-width: #{map-get($grid-breakpoints, xs) - $one}) {
		@content;
	}
}

@mixin screen-xs-max() {
	@media (max-width: #{map-get($grid-breakpoints, sm) - $one}) {
		@content;
	}
}

@mixin screen-sm-max() {
	@media (max-width: #{map-get($grid-breakpoints, md) - $one}) {
		@content;
	}
}

@mixin screen-md-max() {
	@media (max-width: #{map-get($grid-breakpoints, lg) - $one}) {
		@content;
	}
}

@mixin screen-lg-max() {
	@media (max-width: #{map-get($grid-breakpoints, xl) - $one}) {
		@content;
	}
}

//  respond above
// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

	// If the breakpoint exists in the map.
	@if map-has-key($grid-breakpoints, $breakpoint) {

		// Get the breakpoint value.
		$breakpoint-value: map-get($grid-breakpoints, $breakpoint);

		// Write the media query.
		@media (min-width: $breakpoint-value) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {

		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// respond below
// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

	// If the breakpoint exists in the map.
	@if map-has-key($grid-breakpoints, $breakpoint) {

		// Get the breakpoint value.
		$breakpoint-value: map-get($grid-breakpoints, $breakpoint);

		// Write the media query.
		//@media (max-width: ($breakpoint-value - 1)) {
		@media (max-width: ($breakpoint-value - $one)) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {

		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// respond between
// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

	// If both the lower and upper breakpoints exist in the map.
	@if map-has-key($grid-breakpoints, $lower) and map-has-key($grid-breakpoints, $upper) {

		// Get the lower and upper breakpoints.
		$lower-breakpoint: map-get($grid-breakpoints, $lower);
		$upper-breakpoint: map-get($grid-breakpoints, $upper);

		// Write the media query.
		//@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
		@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - $one)) {
			@content;
		}

		// If one or both of the breakpoints don't exist.
	} @else {

		// If lower breakpoint is invalid.
		@if (map-has-key($grid-breakpoints, $lower) == false) {

			// Log a warning.
			@warn 'Your lower breakpoint was invalid: #{$lower}.';
		}

		// If upper breakpoint is invalid.
		@if (map-has-key($grid-breakpoints, $upper) == false) {

			// Log a warning.
			@warn 'Your upper breakpoint was invalid: #{$upper}.';
		}
	}
}


// CSS Logical Properties â€“ margin, padding, border, inset (top, left, right, bottom)
@mixin logical-properties($property, $block-start, $inline-end, $block-end: $block-start, $inline-start: $inline-end) {
	#{$property}-block-end: $block-end;
	#{$property}-block-start: $block-start;
	#{$property}-inline-end: $inline-end;
	#{$property}-inline-start: $inline-start;
}
